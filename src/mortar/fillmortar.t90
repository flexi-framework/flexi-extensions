!=================================================================================================================================
! Copyright (c) 2010-2016  Prof. Claus-Dieter Munz
! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/
!
! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
!
! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.
!=================================================================================================================================
#include "flexi.h"

!==================================================================================================================================
!> Fills small non-conforming sides with data from the corresponding large side, using 1D interpolation operators M_0_1,M_0_2.
!> This is used to obtain the face solution for flux computation.
!>
!> NOTE: that input arrays can be both normal solution or gradient data.
!> NOTE2: fillmortar is only built for PP_N as even in case of overint mortarized data
!>
!>       Type 1               Type 2              Type3
!>        eta                  eta                 eta
!>         ^                    ^                   ^
!>         |                    |                   |
!>     +---+---+            +---+---+           +---+---+
!>     | 3 | 4 |            |   2   |           |   |   |
!>     +---+---+ --->  xi   +---+---+ --->  xi  + 1 + 2 + --->  xi
!>     | 1 | 2 |            |   1   |           |   |   |
!>     +---+---+            +---+---+           +---+---+
!>
!==================================================================================================================================
SUBROUTINE U_Mortar(&
#ifdef WITHnVar
        TP_nVar, &
#endif
        U_in_master,U_in_slave,doMPISides)
! MODULES
USE MOD_Preproc
USE MOD_Mortar_Vars, ONLY: M_0_1,M_0_2
#if FV_ENABLED
USE MOD_Mortar_Vars, ONLY: FV_M_0_1,FV_M_0_2
#endif
USE MOD_Mesh_Vars,   ONLY: MortarType,MortarInfo
USE MOD_Mesh_Vars,   ONLY: firstMortarInnerSide,lastMortarInnerSide
USE MOD_Mesh_Vars,   ONLY: firstMortarMPISide,lastMortarMPISide
USE MOD_Mesh_Vars,   ONLY: FS2M,nSides
#if FV_ENABLED
USE MOD_FV_Vars     ,ONLY: FV_Elems_master
#endif
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN) :: TP_nVar
#endif
REAL,INTENT(INOUT) :: U_in_master(1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides) !< (INOUT) can be U or Grad_Ux/y/z_master
REAL,INTENT(INOUT) :: U_in_slave( 1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides) !< (INOUT) can be U or Grad_Ux/y/z_master
LOGICAL,INTENT(IN) :: doMPISides                                 !< flag whether MPI sides are processed
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER      :: p,q,l
INTEGER      :: iMortar,nMortars
INTEGER      :: firstMortarSideID,lastMortarSideID
INTEGER      :: MortarSideID,SideID,locSide,flip
REAL         :: U_tmp( TP_nVar,0:PP_N,0:PP_NZ,1:4)
#if PP_dim == 3
REAL         :: U_tmp2(TP_nVar,0:PP_N,0:PP_NZ,1:2)
#endif
REAL,POINTER :: M1(:,:),M2(:,:)
!==================================================================================================================================
!                         doMPISides==True   doMPISides==False
firstMortarSideID = MERGE(firstMortarMPISide,firstMortarInnerSide,doMPISides)
 lastMortarSideID = MERGE( lastMortarMPISide, lastMortarInnerSide,doMPISides)

M1=>M_0_1; M2=>M_0_2

DO MortarSideID=firstMortarSideID,lastMortarSideID
#if FV_ENABLED
  IF(FV_Elems_master(MortarSideID).GT.0) THEN ! FV element
    M1=>FV_M_0_1
    M2=>FV_M_0_2
  ELSE ! DG element
    M1=>   M_0_1
    M2=>   M_0_2
  END IF
#endif

#if PP_dim == 3
  SELECT CASE(MortarType(1,MortarSideID))
  CASE(1) !1->4
    !first in eta
    ! The following q- and l-loop are two MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
    !    U_tmp2(iVar,p,:,1)  =  M1 * U_in_master(iVar,p,:,MortarSideID)
    !    U_tmp2(iVar,p,:,2)  =  M2 * U_in_master(iVar,p,:,MortarSideID)
    DO q=0,PP_N
      DO p=0,PP_N ! for every xi-layer perform Mortar operation in eta-direction
        U_tmp2(:,p,q,1)=                  M1(0,q)*U_in_master(:,p,0,MortarSideID)
        U_tmp2(:,p,q,2)=                  M2(0,q)*U_in_master(:,p,0,MortarSideID)
        DO l=1,PP_N
          U_tmp2(:,p,q,1)=U_tmp2(:,p,q,1)+M1(l,q)*U_in_master(:,p,l,MortarSideID)
          U_tmp2(:,p,q,2)=U_tmp2(:,p,q,2)+M2(l,q)*U_in_master(:,p,l,MortarSideID)
        END DO
      END DO
    END DO
    ! then in xi
    DO q=0,PP_N ! for every eta-layer perform Mortar operation in xi-direction
      ! The following p- and l-loop are four MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
      !    U_tmp(iVar,:,q,1)  =  M1 * U_tmp2(iVar,:,q,1)
      !    U_tmp(iVar,:,q,2)  =  M2 * U_tmp2(iVar,:,q,1)
      !    U_tmp(iVar,:,q,3)  =  M1 * U_tmp2(iVar,:,q,2)
      !    U_tmp(iVar,:,q,4)  =  M2 * U_tmp2(iVar,:,q,2)
      DO p=0,PP_N
        U_tmp(:,p,q,1)=                 M1(0,p)*U_tmp2(:,0,q,1)
        U_tmp(:,p,q,2)=                 M2(0,p)*U_tmp2(:,0,q,1)
        U_tmp(:,p,q,3)=                 M1(0,p)*U_tmp2(:,0,q,2)
        U_tmp(:,p,q,4)=                 M2(0,p)*U_tmp2(:,0,q,2)
        DO l=1,PP_N
          U_tmp(:,p,q,1)=U_tmp(:,p,q,1)+M1(l,p)*U_tmp2(:,l,q,1)
          U_tmp(:,p,q,2)=U_tmp(:,p,q,2)+M2(l,p)*U_tmp2(:,l,q,1)
          U_tmp(:,p,q,3)=U_tmp(:,p,q,3)+M1(l,p)*U_tmp2(:,l,q,2)
          U_tmp(:,p,q,4)=U_tmp(:,p,q,4)+M2(l,p)*U_tmp2(:,l,q,2)
        END DO !l=1,PP_N
      END DO
    END DO

  CASE(2) !1->2 in eta
    ! The following q- and l-loop are two MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
    !    U_tmp(iVar,p,:,1)  =  M1 * U_in_master(iVar,p,:,MortarSideID)
    !    U_tmp(iVar,p,:,2)  =  M2 * U_in_master(iVar,p,:,MortarSideID)
    DO q=0,PP_N
      DO p=0,PP_N ! for every xi-layer perform Mortar operation in eta-direction
        U_tmp(:,p,q,1)=                 M1(0,q)*U_in_master(:,p,0,MortarSideID)
        U_tmp(:,p,q,2)=                 M2(0,q)*U_in_master(:,p,0,MortarSideID)
        DO l=1,PP_N
          U_tmp(:,p,q,1)=U_tmp(:,p,q,1)+M1(l,q)*U_in_master(:,p,l,MortarSideID)
          U_tmp(:,p,q,2)=U_tmp(:,p,q,2)+M2(l,q)*U_in_master(:,p,l,MortarSideID)
        END DO
      END DO
    END DO

  CASE(3) !1->2 in xi      NOTE: In 2D only the first space index can be a Mortar (second index is always 0)!!!
#endif
    DO q=0,PP_NZ ! for every eta-layer perform Mortar operation in xi-direction
      ! The following p- and l-loop are two MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
      !    U_tmp(iVar,:,q,1)  =  M1 * U_in_master(iVar,:,q,MortarSideID)
      !    U_tmp(iVar,:,q,2)  =  M2 * U_in_master(iVar,:,q,MortarSideID)
      DO p=0,PP_N
        U_tmp(:,p,q,1)=                 M1(0,p)*U_in_master(:,0,q,MortarSideID)
        U_tmp(:,p,q,2)=                 M2(0,p)*U_in_master(:,0,q,MortarSideID)
        DO l=1,PP_N
          U_tmp(:,p,q,1)=U_tmp(:,p,q,1)+M1(l,p)*U_in_master(:,l,q,MortarSideID)
          U_tmp(:,p,q,2)=U_tmp(:,p,q,2)+M2(l,p)*U_in_master(:,l,q,MortarSideID)
        END DO
      END DO
    END DO
#if PP_dim == 3
  END SELECT ! mortarType(SideID)
#endif

  nMortars=MERGE(4,2,MortarType(1,MortarSideID).EQ.1)
  locSide=MortarType(2,MortarSideID)
  DO iMortar=1,nMortars
    SideID= MortarInfo(MI_SIDEID,iMortar,locSide)
    flip  = MortarInfo(MI_FLIP,iMortar,locSide)
    SELECT CASE(flip)
      CASE(0) ! master side
        U_in_master(:,:,:,SideID)=U_tmp(:,:,:,iMortar)
      CASE(1:4) ! slave side
        DO q=0,PP_NZ; DO p=0,PP_N
          U_in_slave(:,p,q,SideID)=U_tmp(:,FS2M(1,p,q,flip), &
                                           FS2M(2,p,q,flip),iMortar)
        END DO; END DO ! q, p
    END SELECT !flip(iMortar)
  END DO !iMortar
END DO !MortarSideID
END SUBROUTINE U_Mortar


!==================================================================================================================================
!>  Fills master side from small non-conforming sides, using 1D projection operators M_1_0,M_2_0
!>
!> This routine is used to project the numerical flux at the small sides of the nonconforming interface to the corresponding large
!>  ones.
!>
!>        Type 1               Type 2              Type3
!>         eta                  eta                 eta
!>          ^                    ^                   ^
!>          |                    |                   |
!>      +---+---+            +---+---+           +---+---+
!>      | 3 | 4 |            |   2   |           |   |   |
!>      +---+---+ --->  xi   +---+---+ --->  xi  + 1 + 2 + --->  xi
!>      | 1 | 2 |            |   1   |           |   |   |
!>      +---+---+            +---+---+           +---+---+
!>
!==================================================================================================================================
SUBROUTINE Flux_Mortar(&
#ifdef WITHnVar
        TP_nVar, &
#endif
        Flux_master,Flux_slave,doMPISides,weak,onlyFV)
! MODULES
USE MOD_Preproc
USE MOD_Mortar_Vars, ONLY: M_1_0,M_2_0
#if FV_ENABLED
USE MOD_Mortar_Vars, ONLY: FV_M_1_0,FV_M_2_0
#endif
USE MOD_Mesh_Vars,   ONLY: MortarType,MortarInfo,nSides
USE MOD_Mesh_Vars,   ONLY: firstMortarInnerSide,lastMortarInnerSide,FS2M
USE MOD_Mesh_Vars,   ONLY: firstMortarMPISide,lastMortarMPISide
#if FV_ENABLED
USE MOD_FV_Vars     ,ONLY: FV_Elems_master
#endif
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN) :: TP_nVar
#endif
REAL,INTENT(INOUT) :: Flux_master(1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides) !< input data
REAL,INTENT(IN)    :: Flux_slave (1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides) !< input data
LOGICAL,INTENT(IN) :: doMPISides                             !< flag whether MPI sides are processed
LOGICAL,INTENT(IN) :: weak                                   !< flag whether strong or weak form is used
LOGICAL,INTENT(IN),OPTIONAL :: onlyFV                        !< flag whether only FV sides should be handled
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER      :: p,q,l
INTEGER      :: iMortar,nMortars
INTEGER      :: firstMortarSideID,lastMortarSideID
INTEGER      :: MortarSideID,SideID,iSide,flip
REAL         :: Flux_tmp( TP_nVar,0:PP_N,0:PP_NZ,1:4)
#if PP_dim == 3
REAL         :: Flux_tmp2(TP_nVar,0:PP_N,0:PP_NZ,1:2)
#endif
REAL,POINTER :: M1(:,:),M2(:,:)
LOGICAL      :: onlyFV_loc
!==================================================================================================================================
!                         doMPISides==True   doMPISides==False
firstMortarSideID = MERGE(firstMortarMPISide,firstMortarInnerSide,doMPISides)
 lastMortarSideID = MERGE( lastMortarMPISide, lastMortarInnerSide,doMPISides)
IF (PRESENT(onlyFV)) THEN
  onlyFV_loc = onlyFV
ELSE
  onlyFV_loc = .FALSE.
END IF


M1=>M_1_0; M2=>M_2_0
DO MortarSideID=firstMortarSideID,lastMortarSideID
#if FV_ENABLED
  IF (onlyFV_loc) THEN
    IF(FV_Elems_master(MortarSideID).EQ.0) CYCLE ! DG
  END IF
#endif

  nMortars=MERGE(4,2,MortarType(1,MortarSideID).EQ.1)
  iSide=MortarType(2,MortarSideID)
  DO iMortar=1,nMortars
    SideID = MortarInfo(MI_SIDEID,iMortar,iSide)
    flip   = MortarInfo(MI_FLIP,iMortar,iSide)
    SELECT CASE(flip)
    CASE(0) ! master side
      Flux_tmp(:,:,:,iMortar)=Flux_master(:,:,:,SideID)
    CASE(1:4) ! slave sides (should only occur for MPI)
      IF(weak)THEN
        DO q=0,PP_NZ; DO p=0,PP_N
          Flux_tmp(:,p,q,iMortar)=-Flux_slave(:,FS2M(1,p,q,flip),FS2M(2,p,q,flip),SideID)
        END DO; END DO
      ELSE    ! do not change sign if strong form
        DO q=0,PP_NZ; DO p=0,PP_N
          Flux_tmp(:,p,q,iMortar)= Flux_slave(:,FS2M(1,p,q,flip),FS2M(2,p,q,flip),SideID)
        END DO; END DO
      END IF
    END SELECT
  END DO

#if FV_ENABLED
  IF(FV_Elems_master(MortarSideID).GT.0)THEN ! FV element
    M1=>FV_M_1_0
    M2=>FV_M_2_0
  ELSE ! DG element
    M1=>   M_1_0
    M2=>   M_2_0
  END IF
#endif
#if PP_dim == 3
  SELECT CASE(MortarType(1,MortarSideID))
  CASE(1) !1->4
    ! first in xi
    DO q=0,PP_N ! for every eta-layer perform Mortar operation in xi-direction
      ! The following p- and l-loop are four MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
      !    Flux_tmp2(iVar,:,q,1)  =  M1 * Flux_tmp(iVar,:,q,1) + M2 * Flux_tmp(iVar,:,q,2)
      !    Flux_tmp2(iVar,:,q,2)  =  M1 * Flux_tmp(iVar,:,q,1) + M2 * Flux_tmp(iVar,:,q,2)
      DO p=0,PP_N
        Flux_tmp2(:,p,q,1)=                       M1(0,p)*Flux_tmp(:,0,q,1)+M2(0,p)*Flux_tmp(:,0,q,2)
        Flux_tmp2(:,p,q,2)=                       M1(0,p)*Flux_tmp(:,0,q,3)+M2(0,p)*Flux_tmp(:,0,q,4)
        DO l=1,PP_N
          Flux_tmp2(:,p,q,1)=Flux_tmp2(:,p,q,1) + M1(l,p)*Flux_tmp(:,l,q,1)+M2(l,p)*Flux_tmp(:,l,q,2)
          Flux_tmp2(:,p,q,2)=Flux_tmp2(:,p,q,2) + M1(l,p)*Flux_tmp(:,l,q,3)+M2(l,p)*Flux_tmp(:,l,q,4)
        END DO
      END DO
    END DO
    !then in eta
    ! The following q- and l-loop are two MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
    !    Flux_master(iVar,p,:,MortarSideID)  =  M1 * Flux_tmp2(iVar,p,:,1) + M2 * Flux_tmp2(iVar,p,:,2)
    DO q=0,PP_N
      DO p=0,PP_N ! for every xi-layer perform Mortar operation in eta-direction
        Flux_master(:,p,q,MortarSideID)=                                    M1(0,q)*Flux_tmp2(:,p,0,1)+M2(0,q)*Flux_tmp2(:,p,0,2)
        DO l=1,PP_N
          Flux_master(:,p,q,MortarSideID)=Flux_master(:,p,q,MortarSideID) + M1(l,q)*Flux_tmp2(:,p,l,1)+M2(l,q)*Flux_tmp2(:,p,l,2)
        END DO
      END DO
    END DO

  CASE(2) !1->2 in eta
    ! TODO why not q-loop first?
    DO p=0,PP_N ! for every xi-layer perform Mortar operation in eta-direction
      ! The following q- and l-loop are two MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
      !    Flux_master(iVar,p,:,MortarSideID)  =  M1 * Flux_tmp(iVar,p,:,1) + M2 * Flux_tmp(iVar,p,:,2)
      DO q=0,PP_N ! for every xi-layer perform Mortar operation in eta-direction
        Flux_master(:,p,q,MortarSideID)=                                    M1(0,q)*Flux_tmp(:,p,0,1)+M2(0,q)*Flux_tmp(:,p,0,2)
        DO l=1,PP_N
          Flux_master(:,p,q,MortarSideID)=Flux_master(:,p,q,MortarSideID) + M1(l,q)*Flux_tmp(:,p,l,1)+M2(l,q)*Flux_tmp(:,p,l,2)
        END DO
      END DO
    END DO

  CASE(3) !1->2 in xi   NOTE: In 2D only XI mortars
#endif
    DO q=0,PP_NZ ! for every eta-layer perform Mortar operation in xi-direction
      ! The following p- and l-loop are two MATMULs: (ATTENTION M1 and M2 are already transposed in mortar.f90)
      !    Flux_master(iVar,:,q,MortarSideID)  =   M1 * Flux_tmp(iVar,:,q,1) + M2 * Flux_tmp(iVar,:,q,2)
      DO p=0,PP_N
        Flux_master(:,p,q,MortarSideID)=                                    M1(0,p)*Flux_tmp(:,0,q,1)+M2(0,p)*Flux_tmp(:,0,q,2)
        DO l=1,PP_N
          Flux_master(:,p,q,MortarSideID)=Flux_master(:,p,q,MortarSideID) + M1(l,p)*Flux_tmp(:,l,q,1)+M2(l,p)*Flux_tmp(:,l,q,2)
        END DO
      END DO
    END DO

#if PP_dim == 3
  END SELECT ! mortarType(MortarSideID)
#endif
END DO !MortarSideID
END SUBROUTINE Flux_Mortar



!==================================================================================================================================
!> Fills the sliding mesh mortar sides with the variables needed for flux calculation.
!> This includes rotating (flipping) indices p and q into the global mortar system, interpolating and switching indices from iSide
!> and iMortar (1/2) to iiMortar (globally sorted index)
!==================================================================================================================================
SUBROUTINE U_MortarSM(&
#ifdef WITHnVar
        TP_nVar, &
#endif
            U_master,U_slave,U_MorStat,U_MorRot,doMPISides)
! MODULES
USE MOD_Globals
USE MOD_Preproc
USE MOD_Mesh_Vars, ONLY: firstSMSIde,lastSMSide,nSides,IAmAStatProc,IAmARotProc,nSMSides
USE MOD_Mesh_Vars, ONLY: LocToGlobInterface,SlidingMeshInfo
USE MOD_SM_Vars,   ONLY: M_SM_0_1,M_SM_0_2,SMFlip,SMMortarToStatSide,SMMortarToRotSide
USE MOD_SM_Vars,   ONLY: nSlidingMeshInterfaces
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN) :: TP_nVar
#endif
REAL,INTENT(IN)    :: U_master( 1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides)     !<
REAL,INTENT(IN)    :: U_slave(  1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides)     !<
REAL,INTENT(INOUT) :: U_MorStat(1:TP_nVar,0:PP_N,0:PP_NZ,1:2*nSMSides) !<
REAL,INTENT(INOUT) :: U_MorRot( 1:TP_nVar,0:PP_N,0:PP_NZ,1:2*nSMSides) !<
LOGICAL,INTENT(IN) :: doMPISides
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER,POINTER    :: SMMortarToSide(:,:)
INTEGER            :: iSide,iiMortar(2),iInterface
REAL               :: U_tmp (1:TP_nVar,0:PP_N,0:PP_NZ)
REAL,POINTER       :: M1(:,:),M2(:,:)
!==================================================================================================================================
#if USE_MPI
IF(doMPISides)THEN
#endif

! STATOR LOOP
IF(IAmAStatProc)THEN; DO iInterface=1,nSlidingMeshInterfaces
  M1=>M_SM_0_1(:,:,iInterface); M2=>M_SM_0_2(:,:,iInterface)
  DO iSide=firstSMSide,lastSMSide
    IF (SlidingMeshInfo(SM_SIDE_TO_INTERFACE,iSide).NE.LocToGlobInterface(iInterface)) CYCLE

    SMMortarToSide=>SMMortarToStatSide
    iiMortar=SMMortarToSide(:,iSide)

    CALL DoFlip(&
#ifdef WITHnVar
       TP_nVar,&
#endif
       U_Master(:,:,:,iSide),U_tmp,SMFlip(iSide))

    CALL InterpolateSM(&
#ifdef WITHnVar
       TP_nVar,&
#endif
       U_tmp,U_MorStat(:,:,:,iiMortar(1)),U_MorStat(:,:,:,iiMortar(2)),M1,M2,isRotor=.FALSE.)

  END DO !iSide
END DO; END IF !iInterface

! ROTOR LOOP
IF(IAmARotProc)THEN; DO iInterface=1,nSlidingMeshInterfaces
  M1=>M_SM_0_1(:,:,iInterface); M2=>M_SM_0_2(:,:,iInterface)
  DO iSide=firstSMSide,lastSMSide
    IF (SlidingMeshInfo(SM_SIDE_TO_INTERFACE,iSide).NE.LocToGlobInterface(iInterface)) CYCLE

    SMMortarToSide=>SMMortarToRotSide
    iiMortar=SMMortarToSide(:,iSide)

    CALL DoFlip(&
#ifdef WITHnVar
       TP_nVar,&
#endif
       U_Slave(:,:,:,iSide),U_tmp,SMFlip(iSide))

    CALL InterpolateSM(&
#ifdef WITHnVar
       TP_nVar,&
#endif
       U_tmp,U_MorRot(:,:,:,iiMortar(1)),U_MorRot(:,:,:,iiMortar(2)),M1,M2,isRotor=.TRUE.)

  END DO !iSide
END DO; END IF !iInterface
#if USE_MPI
END IF
#endif
END SUBROUTINE U_MortarSM



!==================================================================================================================================
!> Projects the fluxes from the sliding mesh mortar sides back onto the adjacent sides
!> and flips indices p and q back into the local side system; also switches indices from iiMortar (globally sorted index)
!> back to local side index iSide
!==================================================================================================================================
SUBROUTINE Flux_MortarSM(&
#ifdef WITHnVar
        TP_nVar, &
#endif
            Flux_master,Flux_slave,Flux_MorStat,Flux_MorRot,doMPISides)
! MODULES
USE MOD_Globals
USE MOD_Preproc
USE MOD_Mesh_Vars, ONLY:firstSMSIde,lastSMSide,nSides,SurfElem,IAmARotProc,IAmAStatProc,nSMSides,SlidingMeshInfo
USE MOD_Mesh_Vars, ONLY:LocToGlobInterface,SlidingMeshInfo
USE MOD_SM_Vars,   ONLY:M_SM_1_0,M_SM_2_0,SMFlip,SMMortarToStatSide,SMMortarToRotSide
USE MOD_SM_Vars,   ONLY:nSlidingMeshInterfaces
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN) :: TP_nVar
#endif
REAL,INTENT(INOUT) :: Flux_master (1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides)     !<
REAL,INTENT(INOUT) :: Flux_slave  (1:TP_nVar,0:PP_N,0:PP_NZ,1:nSides)     !<
REAL,INTENT(IN)    :: Flux_MorStat(1:TP_nVar,0:PP_N,0:PP_NZ,1:2*nSMSides) !<
REAL,INTENT(IN)    :: Flux_MorRot (1:TP_nVar,0:PP_N,0:PP_NZ,1:2*nSMSides) !<
LOGICAL,INTENT(IN) :: doMPISides
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER,POINTER    :: SMMortarToSide(:,:)
REAL               :: Flux_tmp (1:TP_nVar,0:PP_N,0:PP_NZ)
REAL               :: Flux_tmp2(1:TP_nVar,0:PP_N,0:PP_NZ)
REAL,POINTER       :: M1(:,:),M2(:,:)
INTEGER            :: p,q,iSide,iiMortar(2),iInterface
!==================================================================================================================================
#if USE_MPI
IF(doMPISides)THEN
#endif

!STATOR LOOP
IF(IAmAStatProc)THEN; DO iInterface=1,nSlidingMeshInterfaces
  M1=>M_SM_1_0(:,:,iInterface); M2=>M_SM_2_0(:,:,iInterface)
  DO iSide=firstSMSide,lastSMSide
    IF (SlidingMeshInfo(SM_SIDE_TO_INTERFACE,iSide).NE.LocToGlobInterface(iInterface)) CYCLE

    SMMortarToSide=>SMMortarToStatSide
    iiMortar=SMMortarToSide(:,iSide)

    CALL ProjectSM(&
#ifdef WITHnVar
         TP_nVar, &
#endif
         Flux_MorStat(:,:,:,iiMortar(1)),Flux_MorStat(:,:,:,iiMortar(2)),Flux_tmp,M1,M2,isRotor=.FALSE.)

    CALL DoFlip(&
#ifdef WITHnVar
         TP_nVar, &
#endif
         Flux_tmp,Flux_tmp2,-SMFlip(iSide)) !negative Flip is backwards

    DO q=0,PP_NZ; DO p=0,PP_N
      Flux_master(:,p,q,iSide) = Flux_tmp2(:,p,q) * SurfElem(p,q,0,iSide)
    END DO; END DO
  END DO !iSide
END DO; END IF !iInterface

!ROTOR LOOP
IF(IAmARotProc)THEN; DO iInterface=1,nSlidingMeshInterfaces
  M1=>M_SM_1_0(:,:,iInterface); M2=>M_SM_2_0(:,:,iInterface)
  DO iSide=firstSMSide,lastSMSide
    IF (SlidingMeshInfo(SM_SIDE_TO_INTERFACE,iSide).NE.LocToGlobInterface(iInterface)) CYCLE

    SMMortarToSide=>SMMortarToRotSide
    iiMortar=SMMortarToSide(:,iSide)

    CALL ProjectSM(&
#ifdef WITHnVar
         TP_nVar,&
#endif
         Flux_MorRot(:,:,:,iiMortar(1)),Flux_MorRot(:,:,:,iiMortar(2)),Flux_tmp,M1,M2,isRotor=.TRUE.)

    CALL DoFlip(&
#ifdef WITHnVar
         TP_nVar,&
#endif
         Flux_tmp,Flux_tmp2,-SMFlip(iSide)) !negative Flip is backwards

    DO q=0,PP_NZ; DO p=0,PP_N
      Flux_slave(:,p,q,iSide) = Flux_tmp2(:,p,q) * SurfElem(p,q,0,iSide)
    END DO; END DO
  END DO !iSide
END DO; END IF !iInterface
#if USE_MPI
END IF
#endif
END SUBROUTINE Flux_MortarSM
